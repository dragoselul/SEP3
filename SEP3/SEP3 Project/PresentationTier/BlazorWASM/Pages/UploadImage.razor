@page "/UploadImages/{itemId:long?}/{key?}"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Models
@inject IImageService ImageService;
@inject NavigationManager NavigationManager;
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
<CascadingAuthenticationState>
<AuthorizeView>
	<Authorized>
		<h1>@message</h1>
        
		<div class="input-group card-body">
			<div class="custom-file">
				<InputFile class="custom-file-input" multiple OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile" />
				<label class="custom-file-label" for="inputFile">Choose file</label>
			</div>
			<div class="input-group-append">
				<button class="btn btn-success" @onclick="Upload" disabled="@isDisabled">Upload</button>
			</div>
		</div>
		@foreach (var item in filesBase64)
		{
			<img src="data:@item.contentType;base64,@item.base64data" />
		}
	</Authorized>
	<NotAuthorized>
            <h3>You are not allowed to create posts without an account!</h3>
        </NotAuthorized>
</AuthorizeView>
</CascadingAuthenticationState>


@code {

	[Parameter]
	public long itemId { get; set; }
	
	[Parameter]
	public string key { get; set; }

	List<Image> filesBase64 = new();
	string message = "Insert all the pictures for your item";
	bool isDisabled = false;

	async Task OnChange(InputFileChangeEventArgs e)
	{
		var files = e.GetMultipleFiles(); // get the files selected by the users
		foreach(var file in files)
		{
			var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
			var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
			using (var stream = resizedFile.OpenReadStream())
			{
				await stream.ReadAsync(buf); // copy the stream to the buffer
			}
			filesBase64.Add(new Image{ base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name }); // convert to a base64 string!!
		}
		message = "Click UPLOAD to continue";
	}

	async Task Upload()
	{
		isDisabled = true;
		foreach (Image image in filesBase64)
		{
			ImageService.UploadImage(new ImageCreationDto()
			{
				base64data = image.base64data,
				contentType = image.contentType,
				fileName = image.fileName,
				ItemId = itemId
			});
		}
		NavigationManager.NavigateTo(key.Equals("edit") ? $"EditItem/{itemId}" : "/Marketplace/1");
	}
}