@page "/CreateUser"
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IUserService userService

<div class="card">
    <h3>Create User</h3>
    <div class="form-group field">
        <label>First name:</label>
        <input type="text" @bind="firstName" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    <div class="form-group field">
        <label>Last name:</label>
        <input type="text" @bind="lastName" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    <div class="form-group field">
        <label>Email:</label>
        <input type="text" @bind="email" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    <div class="form-group field">
        <label>Password:</label>
        <input type="password" @bind="password" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    <div class="form-group field">
        <label>Phone number:</label>
        <input type="text" @bind="phoneNumber" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    <div class="button-row">
        <button @onclick="Create" disabled="@(string.IsNullOrEmpty(firstName))" class="acceptbtn">Create</button>
    </div>
</div>

@code {
    private string firstName = "";
    private string lastName = "";
    private string email = "";
    private string password = "";
    private string phoneNumber = "";
    private bool gender;
    private DateTime dor;
    private List<Items> itemsList = new List<Items>();
    private string resultMsg = "";
    private string color = "";

    private async Task Create()
    {
        resultMsg = "";

        try
        {
            await userService.Create(new UserCreationDto(firstName, lastName, email, password, phoneNumber, gender, dor, itemsList));
            firstName = "";
            lastName = "";
            email = "";
            password = "";
            phoneNumber = "";
            gender = false;
            dor = DateTime.Now;
            itemsList = new List<Items>();
            resultMsg = "";
            color = "";
            resultMsg = "User successfully created";
            color = "green";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }
}