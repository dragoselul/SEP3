@page "/CreatePost"
@using Microsoft.AspNetCore.Components.Authorization
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims
@using Domain.Models
@inject NavigationManager navMgr
@inject IItemService ItemService
@inject IUserService UserService

<CascadingAuthenticationState>
    <AuthorizeView Context="Auth">
        <Authorized>
            <div class="form-body">
                <div class="row">
                    <div class="form-holder">
                        <div class="form-content">
                            <div class="form-items">
                                <h3>Hello @name.Split(' ')[0]</h3>
                                <h3>Create a post</h3>
                                <p>Fill in the data below.</p>
                                <EditForm Model="@itemCreation" OnValidSubmit="@HandleValidSubmit">
                                    <DataAnnotationsValidator/>
                                    <div class="col-md-12 ForInput">
                                        <InputText class="form-control ForInput" type="text" placeholder="Title" @bind-Value="itemCreation.Name"/>
                                        <ValidationMessage For="() => itemCreation.Name"/>
                                    </div>
                                    <div class="col-md-12 ForInput">
                                        <InputTextArea class="form-control" type="text" placeholder="Description" @bind-Value="itemCreation.Description"/>
                                        <ValidationMessage For="() => itemCreation.Description"/>
                                    </div>

                                    <div class="col-md-12 ForInput">
                                        <InputNumber class="form-control" placeholder="Price" @bind-Value="itemCreation.Pricing"/>
                                        <ValidationMessage For="() => itemCreation.Pricing"/>
                                    </div>

                                    <div class="col-md-12 ForInput">
                                        <InputText class="form-control" type="text" placeholder="Currency" @bind-Value="itemCreation.Currency"/>
                                        <ValidationMessage For="() => itemCreation.Currency"/>
                                    </div>

                                    <div class="col-md-12 mt-3 dropdown">
                                        <label class="mb-3 mr-1">Category: </label>
                                        <InputSelect class="btn btn-outline-light dropdown-toggle" @bind-Value="itemCreation.Category">
                                            <option class="dropdown-item" value="">Select category ...</option>
                                            <option class="dropdown-item" value="Vehicles">Vehicles</option>
                                            <option class="dropdown-item" value="Electronics">Electronics</option>
                                            <option class="dropdown-item" value="Furniture">Furniture</option>
                                            <option class="dropdown-item" value="Clothes">Clothes</option>
                                        </InputSelect>
                                        <ValidationMessage For="() => itemCreation.Category"/>
                                    </div>
                                    <div class="form-button mt-3">
                                        <button id="submit" type="submit" class="btn btn-primary">Submit</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <h3>You are not allowed to create posts without an account!</h3>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = null!;

    private ItemCreationDto itemCreation = new();
    private string? name;
    private int userId;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal userClaim = authState.User;
        name = userClaim.Identity.Name;
        IEnumerable<User> users = await UserService.GetUsers(name.Split(' ')[0], name.Split(' ')[1]);
        if (users is null && users.Count() != 1)
            throw new Exception();
        List<User> user = new List<User>(users);
        userId = user[0].Id;
    }

    private async void HandleValidSubmit()
    {
        try
        {
            itemCreation.ContactId = userId;
            itemCreation.IsSold = false;
            Item? item = await ItemService.Create(itemCreation);
            navMgr.NavigateTo($"/UploadImages/{item.Id}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}